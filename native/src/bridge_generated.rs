#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    non_snake_case
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

use crate::api::*;
use flutter_rust_bridge::*;

// Section: imports

// Section: wire functions

#[no_mangle]
pub extern "C" fn wire_platform(port_: i64) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "platform",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(platform()),
    )
}

#[no_mangle]
pub extern "C" fn wire_rust_release_mode(port_: i64) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "rust_release_mode",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(rust_release_mode()),
    )
}

#[no_mangle]
pub extern "C" fn wire_scan(port_: i64, timeout_in_seconds: u64) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "scan",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            let api_timeout_in_seconds = timeout_in_seconds.wire2api();
            move |task_callback| scan(task_callback.stream_sink(), api_timeout_in_seconds)
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_simple_adder(port_: i64, a: i32, b: i32) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "simple_adder",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_a = a.wire2api();
            let api_b = b.wire2api();
            move |task_callback| Ok(simple_adder(api_a, api_b))
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_query(port_: i64, command: i32, args: *mut wire_OnvifCommandArgs) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "query",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_command = command.wire2api();
            let api_args = args.wire2api();
            move |task_callback| Ok(query(api_command, api_args))
        },
    )
}

// Section: wire structs

#[repr(C)]
#[derive(Clone)]
pub struct wire_OnvifCommandArgs {
    username: *mut wire_uint_8_list,
    password: *mut wire_uint_8_list,
    uri: *mut wire_uint_8_list,
    service_path: *mut wire_uint_8_list,
    cmd: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_uint_8_list {
    ptr: *mut u8,
    len: i32,
}

// Section: wrapper structs

// Section: static checks

// Section: allocate functions

#[no_mangle]
pub extern "C" fn new_box_autoadd_onvif_command_args() -> *mut wire_OnvifCommandArgs {
    support::new_leak_box_ptr(wire_OnvifCommandArgs::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn new_uint_8_list(len: i32) -> *mut wire_uint_8_list {
    let ans = wire_uint_8_list {
        ptr: support::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    support::new_leak_box_ptr(ans)
}

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        if self.is_null() {
            None
        } else {
            Some(self.wire2api())
        }
    }
}

impl Wire2Api<String> for *mut wire_uint_8_list {
    fn wire2api(self) -> String {
        let vec: Vec<u8> = self.wire2api();
        String::from_utf8_lossy(&vec).into_owned()
    }
}

impl Wire2Api<OnvifCommandArgs> for *mut wire_OnvifCommandArgs {
    fn wire2api(self) -> OnvifCommandArgs {
        let wrap = unsafe { support::box_from_leak_ptr(self) };
        (*wrap).wire2api().into()
    }
}

impl Wire2Api<i32> for i32 {
    fn wire2api(self) -> i32 {
        self
    }
}

impl Wire2Api<OnvifCommand> for i32 {
    fn wire2api(self) -> OnvifCommand {
        match self {
            0 => OnvifCommand::GetSystemDateAndTime,
            1 => OnvifCommand::GetCapabilities,
            2 => OnvifCommand::GetServiceCapabilities,
            3 => OnvifCommand::GetStreamUris,
            4 => OnvifCommand::GetSnapshotUris,
            5 => OnvifCommand::GetHostname,
            6 => OnvifCommand::GetDeviceInformation,
            7 => OnvifCommand::GetStatus,
            8 => OnvifCommand::EnableAnalytics,
            9 => OnvifCommand::GetAnalytics,
            10 => OnvifCommand::GetAll,
            _ => unreachable!("Invalid variant for OnvifCommand: {}", self),
        }
    }
}

impl Wire2Api<OnvifCommandArgs> for wire_OnvifCommandArgs {
    fn wire2api(self) -> OnvifCommandArgs {
        OnvifCommandArgs {
            username: self.username.wire2api(),
            password: self.password.wire2api(),
            uri: self.uri.wire2api(),
            service_path: self.service_path.wire2api(),
            cmd: self.cmd.wire2api(),
        }
    }
}

impl Wire2Api<u64> for u64 {
    fn wire2api(self) -> u64 {
        self
    }
}

impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

impl Wire2Api<Vec<u8>> for *mut wire_uint_8_list {
    fn wire2api(self) -> Vec<u8> {
        unsafe {
            let wrap = support::box_from_leak_ptr(self);
            support::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}

// Section: impl NewWithNullPtr

pub trait NewWithNullPtr {
    fn new_with_null_ptr() -> Self;
}

impl<T> NewWithNullPtr for *mut T {
    fn new_with_null_ptr() -> Self {
        std::ptr::null_mut()
    }
}

impl NewWithNullPtr for wire_OnvifCommandArgs {
    fn new_with_null_ptr() -> Self {
        Self {
            username: core::ptr::null_mut(),
            password: core::ptr::null_mut(),
            uri: core::ptr::null_mut(),
            service_path: core::ptr::null_mut(),
            cmd: Default::default(),
        }
    }
}

// Section: impl IntoDart

impl support::IntoDart for OnvifDevice {
    fn into_dart(self) -> support::DartCObject {
        vec![self.name.into_dart(), self.url_string.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for OnvifDevice {}

impl support::IntoDart for Platform {
    fn into_dart(self) -> support::DartCObject {
        match self {
            Self::Unknown => 0,
            Self::Android => 1,
            Self::Ios => 2,
            Self::Windows => 3,
            Self::Unix => 4,
            Self::MacIntel => 5,
            Self::MacApple => 6,
            Self::Wasm => 7,
        }
        .into_dart()
    }
}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

// Section: sync execution mode utility

#[no_mangle]
pub extern "C" fn free_WireSyncReturnStruct(val: support::WireSyncReturnStruct) {
    unsafe {
        let _ = support::vec_from_leak_ptr(val.ptr, val.len);
    }
}
